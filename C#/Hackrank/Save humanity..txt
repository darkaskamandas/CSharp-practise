using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SaveHumanity
{
    class Program
    {
        static void Main(string[] args)
        {

            

            int T = Int32.Parse(Console.ReadLine());

            int MAX = 200004;

            int MLOG = 19;

            int[][] ST = new int[MAX][];

           

            for (int i = 0; i < ST.Length;i++)
                ST[i] = new int[MLOG];

            for (int t = 0; t < T; t++)
            {

                string P = Console.ReadLine();
                string V = Console.ReadLine();
                Console.ReadLine();

                string S = P+"`"+V;

                int[] sArray = BuildSArray(S);
                int[] rArray = GetRank(sArray);
                int[] height = GetHeight(S, sArray, rArray);

                List<int> result = new List<int>();
 
                BuildSTable(height, ST);


                for(int i=0;i+V.Length-1<P.Length;i++)
                {
                    int p_r = rArray[i];
                    int v_r = rArray[P.Length + 1];

                    if (p_r > v_r)
                    {
                        int temp = p_r;
                        p_r = v_r;
                        v_r = temp;
                    }

                    int h = QueryRMQ(p_r+1,v_r,ST);
                    if (h >= V.Length-1)
                        result.Add(i);
                    else
                    {
                        p_r = rArray[i + h + 1];
                        v_r = rArray[P.Length + 1 + h + 1];
                        
                        if (p_r > v_r)
                        {
                            int temp = p_r;
                            p_r = v_r;
                            v_r = temp;
                        }

                        int h1 = QueryRMQ(p_r + 1, v_r, ST);

                        if (h + h1 >= V.Length - 1)
                            result.Add(i);
                    }

                }

                for (int i = 0; i < result.Count; i++)
                {
                    if (i != 0)
                        Console.Write(" ");

                    Console.Write(result[i]);
                
                }

                Console.WriteLine();
                //for (int i = 0; i < height.Length; i++)
                //    Console.Write(height[i] + " ");
                //Console.WriteLine();

                //for (int i = 0; i < height.Length; i++)
                //    Console.Write(sArray[i] + " ");
                //Console.WriteLine();



            }
        }


        private static int QueryRMQ(int from, int to, int[][] ST)
        {
            int k = (int)(Math.Log(to - from + 1) / Math.Log(2));

            return ST[from][k] < ST[to-(1<<k)+1][k] ? ST[from][k] : ST[to-(1<<k)+1][k];
        }

        private static void BuildSTable(int[] array,int[][] ST)
        {
            int N = array.Length;
            int LOG = (int)(Math.Log(N) / Math.Log(2)) + 1;

            for(int i=0;i<N;i++)
                ST[i][0]=array[i];

            int len = 2;

            for (int j = 1; j <= LOG; j++)
            {
                for (int i = 0; i + len - 1 < N; i++)
                {
                    ST[i][j] = ST[i][j - 1] < ST[i + len / 2][j - 1] ? ST[i][j - 1] : ST[i + len / 2][j - 1];

                //    Console.WriteLine(i+" "+j+" "+ST[i][j]);
                }

                len *= 2;
            }
            
        }

        private static int[] GetRank(int[] sArray)
        {
            int n = sArray.Length;
            int[] rArray = new int[n];
   

            for (int i = 0; i < n; i++)
                rArray[sArray[i]] = i;

            return rArray;
        }

        private static int[] GetHeight(string S, int[] sArray, int[] rArray)
        {

            int n = sArray.Length;

           
            int[] height = new int[n];
       

            int h = 0;

            for (int i = 0; i < n; i++)
            {
                if (rArray[i] > 0)
                {
                    int j = sArray[rArray[i] - 1];

                    while (i+h<S.Length&&j+h<S.Length&&S[i + h] == S[j + h])
                        h++;

                    height[rArray[i]] = h;

                    if (h > 0)
                        h--;
                }
                
            }

            return height;

        }

     


        private static int[] BuildSArray(string raw)
        {

            int[] SA = new int [raw.Length];

            if (raw.Length < 2)
            {
                if(raw.Length == 1)
                    SA[0] = 0;

                return SA;
            }

            int[] s = new int [raw.Length + 3];

            s[raw.Length] = s[raw.Length+1] = s[raw.Length+2] = 0;

            for (int i = 0; i < raw.Length; i++)
                s[i] = raw[i] - 'a' + 2;

            suffixArray(s, SA, raw.Length, 27);

            return SA;
        }

        private static void suffixArray(int[] s, int[] SA, int n, int K)
        {

            int n0 = (n + 2) / 3, n1 = (n + 1) / 3, n2 = n / 3, n02 = n0 + n2;
            int[] s12 = new int[n02 + 3]; s12[n02] = s12[n02 + 1] = s12[n02 + 2] = 0;
            int[] SA12 = new int[n02 + 3]; SA12[n02] = SA12[n02 + 1] = SA12[n02 + 2] = 0;
            int[] s0 = new int[n0];
            int[] SA0 = new int[n0];

            for (int i = 0, j = 0; i < n + (n0 - n1); i++) 
                if (i % 3 != 0) 
                    s12[j++] = i;

            radixPass(s12, SA12, s, 2, n02, K);
            radixPass(SA12, s12, s, 1, n02, K);
            radixPass(s12, SA12, s, 0, n02, K);

            int name = 0, c0 = -1, c1 = -1, c2 = -1;
            for (int i = 0; i < n02; i++)
            {
                if (s[SA12[i]] != c0 || s[SA12[i] + 1] != c1 || s[SA12[i] + 2] != c2)
                { name++; c0 = s[SA12[i]]; c1 = s[SA12[i] + 1]; c2 = s[SA12[i] + 2]; }
                if (SA12[i] % 3 == 1) { s12[SA12[i] / 3] = name; } 
                else { s12[SA12[i] / 3 + n0] = name; } 
            }
           
            if (name < n02)
            {
                suffixArray(s12, SA12, n02, name);
                
                for (int i = 0; i < n02; i++) s12[SA12[i]] = i + 1;
            }
            else
                for (int i = 0; i < n02; i++) SA12[s12[i] - 1] = i;

          
            for (int i = 0, j = 0; i < n02; i++) if (SA12[i] < n0) s0[j++] = 3 * SA12[i];
                radixPass(s0, SA0, s, 0, n0, K);

            for (int p=0, t=n0-n1, k=0; k < n; k++) {
             
                int i = SA12[t] < n0 ? (SA12[t] * 3 + 1) : ((SA12[t] - n0) * 3 + 2); 
                int j = SA0[p]; 
                if (SA12[t] < n0 ? leq(s[i], s12[SA12[t] + n0], s[j], s12[j/3]) : leq(s[i],s[i+1],s12[SA12[t]-n0+1], s[j],s[j+1],s12[j/3+n0]))
                {
                    SA[k] = i; t++;
                    if (t == n02) 
                        for (k++; p < n0; p++, k++) 
                            SA[k] = SA0[p];
                }
                else
                {
                    SA[k] = j; p++;
                    if (p == n0) 
                        for (k++; t < n02; t++, k++)
                            SA[k] = SA12[t] < n0 ? (SA12[t] * 3 + 1) : ((SA12[t] - n0) * 3 + 2);
                }
            }
        }

        private static void radixPass(int[] a, int[] b, int[] r, int offset, int n, int K)
        {
            int[] c = new int[K + 1]; 
            for (int i = 0; i <= K; i++) c[i] = 0;
            for (int i = 0; i < n; i++) c[r[offset+a[i]]]++; 
            for (int i = 0, sum = 0; i <= K; i++) 
            { int t = c[i]; c[i] = sum; sum += t; }

            for (int i = 0; i < n; i++)
                b[c[r[offset+a[i]]]++] = a[i];      
        }

        private static bool leq(int a1, int a2, int b1, int b2) 
            {return(a1 < b1 || a1 == b1 && a2 <= b2); } 

        private static bool leq(int a1, int a2, int a3, int b1, int b2, int b3)
            {return(a1 < b1 || a1 == b1 && leq(a2,a3, b2,b3)); } 

    }
}